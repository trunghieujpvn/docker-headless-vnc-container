# This Dockerfile is used to build an headles vnc image based on Ubuntu

FROM ubuntu:16.04

MAINTAINER Tobias Schneck "tobias.schneck@consol.de"
ENV REFRESHED_AT 2018-03-27

LABEL io.k8s.description="Headless VNC Container with Xfce window manager, firefox and chromium" \
      io.k8s.display-name="Headless VNC Container based on Ubuntu" \
      io.openshift.expose-services="6901:http,5901:xvnc" \
      io.openshift.tags="vnc, ubuntu, xfce" \
      io.openshift.non-scalable=true

## Connection ports for controlling the UI:
# VNC port:5901
# noVNC webport, connect via http://IP:6901/?password=vncpassword
ENV DISPLAY=:1 \
    VNC_PORT=5901 \
    NO_VNC_PORT=6901
EXPOSE $VNC_PORT $NO_VNC_PORT

### Envrionment config
ENV HOME=/headless \
    TERM=xterm \
    STARTUPDIR=/dockerstartup \
    INST_SCRIPTS=/headless/install \
    NO_VNC_HOME=/headless/noVNC \
    DEBIAN_FRONTEND=noninteractive \
    VNC_COL_DEPTH=24 \
    VNC_RESOLUTION=1280x1024 \
    VNC_PW=vncpassword \
    VNC_VIEW_ONLY=false
WORKDIR $HOME

### Add all install scripts for further steps
ADD ./src/common/install/ $INST_SCRIPTS/
ADD ./src/ubuntu/install/ $INST_SCRIPTS/
RUN find $INST_SCRIPTS -name '*.sh' -exec chmod a+x {} +

### Install some common tools
RUN $INST_SCRIPTS/tools.sh
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

### Install xvnc-server & noVNC - HTML5 based VNC viewer
RUN $INST_SCRIPTS/tigervnc.sh
RUN $INST_SCRIPTS/no_vnc.sh

### Install firefox and chrome browser
RUN $INST_SCRIPTS/firefox.sh
RUN $INST_SCRIPTS/chrome.sh

### Install xfce UI
RUN $INST_SCRIPTS/xfce_ui.sh
ADD ./src/common/xfce/ $HOME/

### configure startup
RUN $INST_SCRIPTS/libnss_wrapper.sh
ADD ./src/common/scripts $STARTUPDIR
RUN $INST_SCRIPTS/set_user_permission.sh $STARTUPDIR $HOME
RUN apt-get install -y python-pip python-dev build-essential
RUN pip install --upgrade pip
RUN apt-get install -y software-properties-common
RUN apt update
RUN chmod -R a+rwx /headless/.cache/pip/http
RUN chmod -R a+rwx /headless/.cache/pip
RUN chmod -R a+rwx /headless/.cache
RUN mkdir -m 777 /opt/source
RUN mkdir -m 777 /opt/python_script
RUN apt install -y nano
### ffmpeg
# debian updates
RUN apt-get update && apt-get upgrade -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV DOCKERFFMPEG_VERSION 1

#COPY decklink /root/ffmpeg_sources/decklink


# ffmpeg libraries and compilers including desktop video driver tools
#RUN apt-get update && apt-get -y install autoconf automake build-essential libass-dev libfreetype6-dev \
#   libtheora-dev libtool libvorbis-dev \
#   pkg-config texinfo wget zlib1g-dev \
#   yasm checkinstall git libmp3lame-dev dkms libgl1-mesa-glx libgl1 linux-headers-amd64 && \
#apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \

# ffmpeg libraries and compilers
RUN apt-get update && apt-get -y install autoconf automake build-essential libfreetype6-dev \
   libtheora-dev libtool libvorbis-dev \
   pkg-config texinfo wget zlib1g-dev \
   yasm checkinstall git libmp3lame-dev unzip && \
apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \


mkdir -p ~/ffmpeg_sources && \

# compile nasm 2.13
cd ~/ffmpeg_sources && \
wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.01/nasm-2.13.01.tar.bz2 && \
tar xjvf nasm-2.13.01.tar.bz2 && \
cd nasm-2.13.01 && \
./autogen.sh && \
./configure && make && checkinstall -y && \

# compile latest libx264
cd ~/ffmpeg_sources && \
git clone git://git.videolan.org/x264.git && \
cd x264 && ./configure --enable-static && \
make && checkinstall -y --pkgversion 0 && ldconfig && \
cp /root/ffmpeg_sources/x264/*.deb /root && \

cd ~/ffmpeg_sources && \
git clone https://github.com/mstorsjo/fdk-aac.git && \
cd fdk-aac && ./autogen.sh && ./configure --enable-static && \
make && checkinstall -y --pkgversion 0 && ldconfig && \

mkdir /usr/local/share/doc && mkdir /usr/local/share/ffmpeg && \

cd ~/ffmpeg_sources && \
wget -O decklink.zip https://www.dropbox.com/s/hqjuxvthmc8n5i3/bm-include.zip?dl=1 && \
mkdir -p decklink && \
unzip -j decklink.zip -d decklink && \

# compile latest ffmpeg
cd ~/ffmpeg_sources && \
git clone http://source.ffmpeg.org/git/ffmpeg.git && \
cd ~/ffmpeg_sources/ffmpeg && \
./configure --enable-gpl --enable-libx264 \
  --enable-static \
  --enable-libfdk-aac \
  --enable-libmp3lame \
  --extra-cflags=-I../decklink --extra-ldflags=-I../decklink \
  --enable-decklink \
  --pkg-config-flags="--static" \
  --enable-nonfree && \
make && checkinstall -y && ldconfig && \
ffmpeg -h && echo hi && \

cp /root/ffmpeg_sources/ffmpeg/*.deb /root && \ 


SUDO_FORCE_REMOVE=yes apt-get -y --autoremove purge nasm \
  autoconf automake build-essential  \
  libtheora-dev libtool libvorbis-dev \
  pkg-config texinfo wget zlib1g-dev \
  yasm checkinstall git && \
 #libgl1-mesa-glx libgl1 linux-headers-amd64 unzip && \
apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
rm -rf ~/ffmpeg_sources && \

ffmpeg -h && echo finished

#EXPOSE 53/udp 53/tcp 953/tcp
#VOLUME ["/etc/bind"]
#VOLUME ["/var/lib/bind"]

COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh



USER 1000

ENTRYPOINT ["/dockerstartup/vnc_startup.sh"]
CMD ["--wait"]
